from machine import Pin
from neopixel import NeoPixel
import time
from random import randint

pin = Pin(33, Pin.OUT)
qty = 256
np = NeoPixel(pin, qty)


class Pixel:
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color


class Matrix:
    def __init__(self, qty):
        self.matrix = []
        self.qty = qty
        self._init_matrix(qty)
        
    def _init_matrix(self, qty):
        print(qty)


def line_top_bottom(color=(25, 25, 25)):
    pos = 0
    row = 16
    while pos < 256:
        while pos < row:
            np[pos] = color
            pos = pos + 1
        np.write()
        time.sleep(0.05)
        row = row + 16
        clear()


def full_color(color):
    np.fill(color)
    np.write()


def full_fade_in():
    for brightness in range (0, 100):
        np.fill((brightness, 0, 0))
        np.write()
        time.sleep(0.01)
        

def color_change():
    for red in range (0, 100):
        np.fill((red, 0, 0))
        np.write()
        time.sleep(0.05)
    red = 100
    for green in range (0, 100):
        np.fill((red, green, 0))
        np.write()
        time.sleep(0.05)
        red = red - 1
    green = 100
    for blue in range (0, 100):
        np.fill((0, green, blue))
        np.write()
        time.sleep(0.05)
        green = green - 1


def clear():
    np.fill((0, 0, 0))
    np.write()


def test_animations():
    line_top_bottom(color=(0, 100, 0))
    color_change()
    clear()
    line_top_bottom()
    
    line_top_bottom(color=(0, 100, 0))
    line_top_bottom(color=(0, 0, 100))
    full_color((25, 0, 0))
    time.sleep(0.5)
    full_color((0, 25, 0))
    time.sleep(0.5)
    full_color((0, 0, 25))
    time.sleep(0.5)
    for _ in range(0, 100):
           random_color_flash()
           time.sleep(0.001)
    clear()


def random_colors():
    for pos in range(0, 256):
        max = randint(0, 50)
        np[pos] = (randint(0, max), randint(0, max), randint(0, max))
    np.write()


def random_color_flash():
    np[randint(0, 255)] = (255, 255, 255)
    np[randint(0, 255)] = (255, 0, 0)
    np[randint(0, 255)] = (0, 255, 0)
    np[randint(0, 255)] = (0, 0, 255)
    np[randint(0, 255)] = (255, 0, 255)
    np[randint(0, 255)] = (0, 255, 255)
    np.write()
    time.sleep(0.03)
    clear()
    

# generates coordinates for a ws2812-matrix (y | x)
def create_pixel_num_array(pixel_width, pixel_height):
      pixel_num_array = []
      row_start = 0
      row_end = pixel_height
      for row in range(pixel_width):
          row = []
          for i in range(row_start, row_end):
            row.append(i)
      
          row_start = row_end
          row_end = row_end + 16
          pixel_num_array.append(row)
          
      count = 0
      for row in pixel_num_array:
          if count % 2 == 0:
              row.reverse()
          count += 1
      
      return pixel_num_array


def line_bottom_top(coord, width, height, speed=0.05, color=(0, 0, 100)):
    for y in range(height-1, -1, -1):
        for x in range(0, width):
            np[coord[y][x]] = color
        np.write()
        time.sleep(speed)
        clear()
        

def line_right_left(coord, width, height, speed=0.05, color=(100, 0, 100)):
    for x in range(height-1, -1, -1):
        for y in range(0, width):
            np[coord[y][x]] = color
        np.write()
        time.sleep(speed)
        clear()


def line_left_right():
    pass


def line_bottom_and_right():
    pass


def set_array_drawing(coord, array_drawing, width=16, height=16):
    for x in range(height-1, -1, -1):
        for y in range(0, width):
            np[coord[y][x]] = array_drawing[y][x]
    np.write()


def shift_array_drawing(array_drawing, direction):
    if direction == 'right':
        rows_qty = len(array_drawing) 
        cols_qty = len(array_drawing[0])
        saved_row = []
        new_row = []
        try:
            for row in range(1):
                #range(rows_qty)
                for value in array_drawing[row]:
                    saved_row.append(value)
                
                for value in saved_row:
                    
        
                print("saved row", saved_row)
        except IndexError:
            print("Object with ID x is partially or fully out of screen")
                
    return array_drawing



def main():
    array_drawing = [
        [{'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
         {'id': 0,'color': [0, 0, 0], 'brightness': 1},
        ],
        [[0, 0, 0],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]]
    ]
    
    array_drawing_2 = [
        [[0, 0, 0],[10, 10, 10],[10, 10, 10],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]]
    ]
    
    array_drawing_3 = [
        [[0, 0, 0],[0, 0, 0],[10, 10, 10],[10, 10, 10],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[10, 10, 10],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]],
        [[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]]
    ]
    
    
    try:
        shifted_array_drawing = shift_array_drawing(array_drawing, 'right')
        for row in shifted_array_drawing:
            print(row)
        while True:
            coord = create_pixel_num_array(16, 16)
            set_array_drawing(coord, array_drawing)
            time.sleep(0.08)
            set_array_drawing(coord, array_drawing_2)
            time.sleep(0.08)
            set_array_drawing(coord, array_drawing_3)
            time.sleep(0.08)
            set_array_drawing(coord, array_drawing_2)
            time.sleep(0.08)
            set_array_drawing(coord, array_drawing)
            time.sleep(0.08)

#        while True:
#            line_right_left(coord, 16, 16)
#            line_bottom_top(coord, 16, 16)
#            test_animations()
#         np[coord[1][5]] = [10, 10, 10]
#         np.write()
#         np[254] = [10, 10, 10]
#         np.write()
#         time.sleep(1)
#         clear()
#         count = 0
#         np[254] = [10, 10, 10]
#         np.write()
#         for pixel in np:
#             print(count, pixel)
#             count += 1
#         clear()
    except KeyboardInterrupt:
        clear()

    
if __name__ == '__main__':
    main()